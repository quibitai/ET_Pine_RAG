# API Keys
GOOGLE_API_KEY=your_google_api_key
GOOGLE_GENERATIVE_AI_API_KEY=your_google_generative_ai_key_here
PINECONE_API_KEY=your_pinecone_api_key
TAVILY_API_KEY=your_tavily_api_key
OPENAI_API_KEY=your_openai_api_key
REPLICATE_API_TOKEN=your_replicate_api_token

# Google Document AI Configuration
GOOGLE_CREDENTIALS_JSON={"type":"service_account","project_id":"your_project"}
GOOGLE_PROJECT_ID=your_google_project_id
DOCUMENT_AI_PROCESSOR_ID=your_processor_id
DOCUMENT_AI_LOCATION=us

# Pinecone Configuration
# Use either PINECONE_ENVIRONMENT or PINECONE_INDEX_HOST as needed
PINECONE_ENVIRONMENT=your_pinecone_environment
PINECONE_INDEX_HOST=your_pinecone_index_host_here
PINECONE_INDEX_NAME=your_pinecone_index

# Database Configuration
# For local development, you need a PostgreSQL database.
# You can use Docker to run Postgres: docker run --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres
# Then you can use this URL to connect to it locally:
POSTGRES_URL=postgres://postgres:postgres@localhost:5432/postgres

# For production, use the Vercel PostgresQL integration and it will populate the POSTGRES_URL automatically

# Vercel Blob Storage
BLOB_READ_WRITE_TOKEN=vercel_blob_read_write_token

# Authentication
AUTH_SECRET=random_generated_secret

# Disable telemetry during development (optional)
NEXT_TELEMETRY_DISABLED=1

# QStash
QSTASH_TOKEN=your_qstash_token
QSTASH_CURRENT_SIGNING_KEY=your_qstash_current_signing_key
QSTASH_NEXT_SIGNING_KEY=your_qstash_next_signing_key
QSTASH_WORKER_URL=https://your-app.vercel.app/api/rag-worker 